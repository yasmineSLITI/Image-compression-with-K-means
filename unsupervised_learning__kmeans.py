# -*- coding: utf-8 -*-
"""Unsupervised_Learning _Kmeans.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vGcXMb6WlCa7OhZqmB1ybpnzRtO21pbU
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
# %matplotlib inline

def find_closest_centroid(X,centroids):
  # the inputs
  #X is of shape(m,n) => m : the number of observations and n is the number of features
  #centroids is of shape(k,n) => k is the number of centroids and n is the number of features

  # the outputs
  #idx is an array of shape(m,) => for each observations ,we stock its closest centroid

  # find the total number of centroids
  k=centroids.shape[0] 
  # find the number of observations
  n = X.shape[0]
  # initialize idx
  idx=np.zeros(X.shape[0],dtype=int)
  for i in range(n):
    distances_to_centroid=[]
    for j in range(k):
      distances_to_centroid.append(np.linalg.norm(X[i]-centroids[j]))
    
    idx[i]=np.argmin(distances_to_centroid)


  return idx;

def compute_centroids(X,idX,k):
  #assign new centroids by computing the average of centroids belonging to the same cluster
  # initialize the centroids dataframe
  centroids = np.zeros((k,X.shape[1]))
  for i in range(k):
    points=X[idX==i]
    centroids[i]=np.mean(points,axis=0)

  return centroids

def run_k_means(X,centroids,max_iter):

  for k in range(max_iter):
    print("Kmean iteration number: ",k)
    idx=find_closest_centroid(X,centroids)
    centroids=compute_centroids(X,idx,centroids.shape[0])


  return centroids,idx

def init_centroids(X,k):
  #shuffle randomly the indices for X
  rand_indexes= np.random.permutation(X.shape[0])

  #Pick the first k indices as centroids
  centroids=X[rand_indexes[:k]]

  return centroids



"""**Image compression using Kmeans**"""

#load an image of a bird
original_image=plt.imread("bird_small.png")

#visualize the image
plt.imshow(original_image)

#checking the dimension of our original data 
print("The shape of the original image : ",original_image.shape)

"""**Data processing**"""

#Data scaling : we divide the data by 255 so that all the values range between 0 and 1
original_image = original_image/255
#Reshape the image into an m*3 matrix where m is the number of pixels
x_img=np.reshape(original_image,(original_image.shape[0]*original_image.shape[1],3))

"""**Kmeans on image pixels**"""

k=16
max_iters=10

#Initialize the kcentroids by random values
centroids = init_centroids(x_img,k)
centroids,idx = run_k_means(x_img,centroids,max_iters)

print("the closest clusters to the first 5 elements of our dataframe :",idx[:19])

recovered_image=centroids[idx,:]
compressed_image=np.reshape(recovered_image,original_image.shape)

"""**Original vs Compressed image**"""

fig,ax=plt.subplots(1,2,figsize=(8,8))

ax[0].imshow(original_image*255)
ax[0].set_title("The original image")
ax[0].set_axis_off()


ax[1].imshow(compressed_image*255)
ax[1].set_title("The compressed image")
ax[1].set_axis_off()